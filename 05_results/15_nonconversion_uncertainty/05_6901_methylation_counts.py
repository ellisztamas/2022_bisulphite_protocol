"""
Script to import the TAIR10 annotation file and pull out information methylated
and unmethylated reads in each context for:
1. genes
2. RdDM- and CMT-regulated TEs
3. windows of 1000 base pairs across each chromosome
for the genotyping file on the 30x Col-0 data we ran.
"""

import epiclinestools as epi
import pandas as pd
import argparse

# Parameters
parser = argparse.ArgumentParser(description = 'Parse parameters ')
parser.add_argument('-i', '--input', help = 'A cytosine report file generated by Bismark', required = True)
parser.add_argument('-w', '--windows', help = 'CSV file', required = True)
parser.add_argument('-f', '--features', help = 'CSV file', required = True)
args = parser.parse_args()

print("Using epiclinestools verion {}".format(epi.__version__))

# Cytosine coverage file
print("Importing coverage file.")
cx_report = epi.CytosineCoverageFile(args.input)
cx_report = epi.CytosineCoverageFile(
    '04_output/30x_9601/bismark_meths/cx_report/220842_AGGCGTTCGCTTCATCCAAC_S11_R1_001_val_1_bismark_bt2_pe.deduplicated.CX_report.txt.gz'
)

# WINDOWS
# Get counts in windows of 1000 bp
print("Counting methylated reads in windows")
cx_report.methylation_in_windows(window_size = 1000).to_csv(
    args.windows, index=False
)

# METHYLATION OVER ANNOTATED FEATURES
# annotated genes in tair10
print("Count methylated reads over annotated features.")
gff = pd.read_csv(
    "01_data/11_tair10/TAIR10_GFF3_genes_transposons.gff", sep = "\t",
    names = ['seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes']
    )
gff = gff.loc[(gff['seqid'] == "ChrC") & (gff['type'] != 'chromosome')]
# pull gene names and chromosome labels from the attributes column
gff['seqid'] = gff['attributes'].str.extract('(ATC.{1,2}[0-9]{5})')
gff['chr']   = "Chr" + gff['seqid'].str.slice(2,3)

# Create summary table and save to disk.
meth_over_features = cx_report.methylation_over_features(
    chr = gff['chr'],
    start = gff['start'],
    stop = gff['end'],
    names = gff['seqid'] + "_" + gff['type']
)

meth_over_features.to_csv(
    args.features, index=False
)