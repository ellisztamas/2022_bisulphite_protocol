import argparse
from BismarkSam import BismarkSam


# Parameters
parser = argparse.ArgumentParser(description = 'Parse parameters ')
parser.add_argument('-i', '--input', help = 'A sorted SAM file generated by Bismark', required = True)
parser.add_argument('-k', '--keep', help = 'Output file for reads to keep', required = True)
parser.add_argument('-d', '--discard', help = 'Output file for reads to be discarded')
args = parser.parse_args()

# Import samfile line by line
reads = [line.split("\t") for line in open(args.input, "r").read().split("\n")]
print(args.input)
print("File has {} lines".format( len(reads)) )
# Pull out header information
header = [read for read in reads if read[0].startswith('@')]
header = ['\t'.join(read) + '\n' for read in header]
# Keep reads if they are not empty and do not start with '@'
reads = [read for read in reads if (read != ['']) & ( read[0].startswith("@") is False ) ]

# Create output files
outfile_keep    = open(args.keep, 'w')
outfile_discard = open(args.discard, 'w')
# Write the SAM header
outfile_keep.writelines(header)
outfile_discard.writelines(header)

n_mate_pairs = 0
n_pairs_kept = 0
n_pairs_discarded = 0
# Loop over the remaining reads in pairs.
for i in range(0, len(reads), 2 ):
    mate1 = BismarkSam(reads[i])
    mate2 = BismarkSam(reads[i+1])
    # Check the mates are a valid pair.
    if mate1.id != mate2.id:
        raise ValueError("Read IDs for the two mates in pair {} do not match".format(i))
    # Check whether to keep read 1
    if mate1.count_mC()[0] <= 1: # Keep if there are zero or one cytosines
        keep1 = True
    else: # Keep if cytosines do not cluster.
        keep1 = not mate1.mC_cluster()
    # Check whether to keep read 2
    if mate2.count_mC()[0] <= 1:
        keep2 = True
    else:
        keep2 = not mate2.mC_cluster()
    

    # If both reads are good, write to the keep file
    if keep1 & keep2:
        outfile_keep.write( '\t'.join(reads[i]  ) + '\n')
        outfile_keep.write( '\t'.join(reads[i+1]) + '\n')
        n_pairs_kept += 1
    # If either is bad, discard them both
    else:
        outfile_discard.write( '\t'.join(reads[i]  ) + '\n')
        outfile_discard.write( '\t'.join(reads[i+1]) + '\n')
        n_pairs_discarded += 1

    n_mate_pairs += 1

outfile_keep.close()
outfile_discard.close()

print("{} mates pairs processed.".format(n_mate_pairs) )
print("{} pairs kept.".format(n_pairs_kept) )
print("{} pairs discarded.".format(n_pairs_discarded) )